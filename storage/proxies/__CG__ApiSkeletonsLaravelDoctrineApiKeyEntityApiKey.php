<?php

namespace DoctrineProxies\__CG__\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ApiKey extends \ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\ApiKey implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'name', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'api_key', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'is_active', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'created_at', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'status_at', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'id', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'accessEvents', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'adminEvents', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'scopes'];
        }

        return ['__isInitialized__', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'name', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'api_key', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'is_active', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'created_at', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'status_at', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'id', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'accessEvents', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'adminEvents', '' . "\0" . 'ApiSkeletons\\Laravel\\Doctrine\\ApiKey\\Entity\\ApiKey' . "\0" . 'scopes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ApiKey $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function hasScope(string $scopeName): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasScope', [$scopeName]);

        return parent::hasScope($scopeName);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setApiKey($apiKey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApiKey', [$apiKey]);

        return parent::setApiKey($apiKey);
    }

    /**
     * {@inheritDoc}
     */
    public function getApiKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApiKey', []);

        return parent::getApiKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusAt($statusAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusAt', [$statusAt]);

        return parent::setStatusAt($statusAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusAt', []);

        return parent::getStatusAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addAccessEvent(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\AccessEvent $accessEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAccessEvent', [$accessEvent]);

        return parent::addAccessEvent($accessEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAccessEvent(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\AccessEvent $accessEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAccessEvent', [$accessEvent]);

        return parent::removeAccessEvent($accessEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessEvents', []);

        return parent::getAccessEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function addAdminEvent(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\AdminEvent $adminEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAdminEvent', [$adminEvent]);

        return parent::addAdminEvent($adminEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAdminEvent(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\AdminEvent $adminEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAdminEvent', [$adminEvent]);

        return parent::removeAdminEvent($adminEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdminEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdminEvents', []);

        return parent::getAdminEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function addScope(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addScope', [$scope]);

        return parent::addScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function removeScope(\ApiSkeletons\Laravel\Doctrine\ApiKey\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeScope', [$scope]);

        return parent::removeScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function getScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScopes', []);

        return parent::getScopes();
    }

}
